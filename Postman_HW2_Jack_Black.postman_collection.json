{
	"info": {
		"_postman_id": "d2315a5a-c894-4c1e-9b9d-acf188f21d0d",
		"name": "Postman_HW2_Jack_Black",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19372858"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first?name=Jack&age=27",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Jack"
						},
						{
							"key": "age",
							"value": "27"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"// Спарсить request.\r",
							"let req = request.data;\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect('Jack').to.eql(resp_name);\r",
							"    });\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    let resp_age = jsonData.age;\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect('27').to.eql(resp_age);\r",
							"    });\r",
							"    // Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    let resp_salary = jsonData.salary;\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(1000).to.eql(resp_salary);\r",
							"    });\r",
							"    let req_name = req.name;\r",
							"    pm.test(\"name1\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"    });\r",
							"    let req_age = req.age;\r",
							"    pm.test(\"age1\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"    });\r",
							"    let req_salary = req.salary;\r",
							"    pm.test(\"salary1\", function () {\r",
							"    pm.expect(req_salary).to.eql(JSON.stringify(resp_salary));\r",
							"    });\r",
							"    let family = jsonData.family;\r",
							"    console.log(\"family--\", family);\r",
							"    let resp_salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"pm.test(\"salary4\", function () {\r",
							"    pm.expect(req_salary*4).to.eql(resp_salary_1_5);\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Jack",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3?age=27&name=Jack&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "name",
							"value": "Jack"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"pm.test(\"name\", function()   {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"let resp_age = jsonData.age;\r",
							"let req_age = req.age;\r",
							"pm.test(\"age\", function() {\r",
							"    pm.expect(req_age).to.eql(resp_age)\r",
							"});\r",
							"let resp_salary = jsonData.salary;\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"salary\", function() {\r",
							"    pm.expect(req_salary).to.eql(JSON.stringify(resp_salary));\r",
							"});\r",
							"let family = jsonData.family;\r",
							"console.log('family', family);\r",
							"let dog = jsonData.family.pets.dog;\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(JSON.stringify(dog)).to.include(\"name\");\r",
							"});\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(JSON.stringify(dog)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    \r",
							"    pm.expect(dog.name).to.eql('Luky');\r",
							"});\r",
							"pm.test(\"Your test age\", function () {\r",
							"    \r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Jack&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Jack"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json. Спарсить request.\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"let req = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"pm.test('name',function() {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"pm.test('age', function() {\r",
							"    pm.expect(req_age).to.eql(JSON.stringify(jsonData.age))\r",
							"});\r",
							"// Вывести в консоль параметр salary из request.\r",
							" console.log(req.salary);\r",
							" // Вывести в консоль параметр salary из response.\r",
							" console.log(jsonData.salary);\r",
							" // Вывести в консоль 0-й элемент параметра salary из response.\r",
							" console.log(jsonData.salary[0]);\r",
							" // Вывести в консоль 1-й элемент параметра salary из response.\r",
							" console.log(jsonData.salary[1]);\r",
							" // Вывести в консоль 2-й элемент параметра salary из response.\r",
							" console.log(jsonData.salary[2]);\r",
							" // Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"pm.test('salary', function() {\r",
							"    pm.expect(req_salary).to.eql(JSON.stringify(jsonData.salary[0]))\r",
							"});\r",
							"// Проверить, что 0-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('salary1', function() {\r",
							"    pm.expect(JSON.stringify(req_salary*2)).to.eql(jsonData.salary[1])\r",
							"});\r",
							"// Проверить, что 0-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('salary2', function() {\r",
							"    pm.expect(JSON.stringify(req_salary*3)).to.eql(jsonData.salary[2])\r",
							"});\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\",\"Jack\");\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"27\");\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"1500\");\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"pm.test('data', function() {\r",
							"    let salaryList = jsonData.salary;\r",
							"for (key in salaryList){\r",
							"console.log(salaryList[key])\r",
							"}   \r",
							"});\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"pm.test(\"Cicle\", function() {\r",
							"jsonData.salary.forEach( el => console.log(el));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Jack&age=27&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Jack"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр name из окружения в name\r",
							"pm.variables.get(\"name\");\r",
							"// Вставить параметр age из окружения в age\r",
							"pm.variables.get(\"age\");\r",
							"// Вставить параметр salary из окружения в request\r",
							"pm.variables.get(\"salary\");\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.  Спарсить request.\r",
							"let jsonData = pm.response.json();\r",
							"let req = request.data\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('Check qa_salary', function() {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('start_qa_salary')\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('Check qa_salary_after_6_months', function() {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_6_months')\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test('Check qa_salary_after_12_months', function() {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_12_months')\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('Check qa_salary_after_1.5_year', function() {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_1.5_year')\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('Check qa_salary_after_3.5_year', function() {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_3.5_year')\r",
							"});\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test('Check person', function() {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('person')\r",
							"});\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check resp_salary\", function() {\r",
							"    pm.expect(JSON.stringify(jsonData.start_qa_salary)).to.eql(req.salary)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Check salary_6m', function() {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2)\r",
							"});\r",
							"pm.test('Check salary_12m', function() {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Check salary_1_5_years', function() {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req.salary*3.3)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('Check salary_3_5_years', function() {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary*3.8)\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('Check u_name', function() {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary)\r",
							"});\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('Check u_age', function() {\r",
							"    pm.expect(jsonData.person['u_age']).to.eql(+req.age)\r",
							"});\r",
							"//  Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('Check salary_5_years', function() {\r",
							"    pm.expect(Number(jsonData.person[\"u_salary_5_years\"])).to.eql(Number(req.salary*4.2))\r",
							"});\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"pm.test('Person', function() {\r",
							"  for(i in jsonData.person){\r",
							"      console.log(jsonData.person[i]);\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}